// <auto-generated />
using System;
using AIYTVideoSummarizer.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AIYTVideoSummarizer.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.FormattedTranscript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("FormattedTranscripts");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Prompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Prompts");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.SummarizationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("PromptId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromptId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("SummarizationRequests");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("PromptId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PromptId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.SummarySection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("SummaryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("SummaryId");

                    b.ToTable("SummarySections");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(700)
                        .HasColumnType("character varying(700)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.UserExternalLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey")
                        .IsUnique();

                    b.ToTable("UserExternalLogins");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("YouTubeUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("YouTubeVideoID")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.FormattedTranscript", b =>
                {
                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Video", "Video")
                        .WithMany("FormattedTranscripts")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.SummarizationRequest", b =>
                {
                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Prompt", "Prompt")
                        .WithMany("SummarizationRequests")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.User", "User")
                        .WithMany("SummarizationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Video", "Video")
                        .WithMany("SummarizationRequest")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Prompt");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Summary", b =>
                {
                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Prompt", "Prompt")
                        .WithMany("Summaries")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.User", "User")
                        .WithMany("Summaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Video", "Video")
                        .WithMany("Summaries")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prompt");

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.SummarySection", b =>
                {
                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.Summary", "Summary")
                        .WithMany("SummarySections")
                        .HasForeignKey("SummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.UserExternalLogin", b =>
                {
                    b.HasOne("AIYTVideoSummarizer.Domain.Entities.User", "User")
                        .WithMany("ExternalLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Prompt", b =>
                {
                    b.Navigation("Summaries");

                    b.Navigation("SummarizationRequests");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Summary", b =>
                {
                    b.Navigation("SummarySections");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.User", b =>
                {
                    b.Navigation("ExternalLogins");

                    b.Navigation("Summaries");

                    b.Navigation("SummarizationRequests");
                });

            modelBuilder.Entity("AIYTVideoSummarizer.Domain.Entities.Video", b =>
                {
                    b.Navigation("FormattedTranscripts");

                    b.Navigation("Summaries");

                    b.Navigation("SummarizationRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
